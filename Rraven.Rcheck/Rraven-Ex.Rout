
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Rraven"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "Rraven-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('Rraven')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("exp_empty_sels")
> ### * exp_empty_sels
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: exp_empty_sels
> ### Title: Export a 'Raven' selection for all sound files in a folder
> ### Aliases: exp_empty_sels
> 
> ### ** Examples
> 
> 
> # Load data
> library(warbleR)
Loading required package: maps
Loading required package: tuneR
Loading required package: seewave
Loading required package: NatureSounds

NOTE: functions are being renamed (run 'print(new_function_names)' to see new names). Both old and new names are available in this version 
 Please see citation('warbleR') for use in publication
> data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
> 
> # Export a single selection table including multiple files
> writeWave(Phae.long1, "Phae.long1.wav", extensible = FALSE) #save sound files 
> writeWave(Phae.long2, "Phae.long2.wav", extensible = FALSE)
> writeWave(Phae.long3, "Phae.long3.wav", extensible = FALSE)
> writeWave(Phae.long4, "Phae.long4.wav", extensible = FALSE)
> 
> # export with no file name
> exp_empty_sels()
all selections are OK 
   |                                                  | 0 % ~calculating     |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed = 00s
> 
> # export with file name
> exp_empty_sels(file.name = "Phaethornis.longirostris")
all selections are OK 
   |                                                  | 0 % ~calculating     |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed = 00s
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("exp_empty_sels", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:warbleR’, ‘package:NatureSounds’, ‘package:seewave’,
  ‘package:tuneR’, ‘package:maps’

> nameEx("exp_est")
> ### * exp_est
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: exp_est
> ### Title: Export wave objects of extended selection tables as sound files
> ### Aliases: exp_est
> 
> ### ** Examples
> 
> {
+ # First set temporary folder
+ # setwd(tempdir())
+ 
+ # load example data
+ data(list = "Phae.long.est", package = "NatureSounds")
+ 
+ # subset to 10 selections
+ X <- Phae.long.est[1:10, ]
+ 
+ # Export data to a single sound file
+ exp_est(X, file.name = "test", single.file = TRUE)
+ 
+ # Export data to a single sound file and normalizing, no pb
+ exp_est(X, file.name = "test2", single.file = TRUE, normalize = TRUE, pb = FALSE)
+ 
+ # several files
+ exp_est(X, single.file = FALSE, file.name = "test3")
+ }
   |                                                  | 0 % ~calculating     |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed = 00s
   |                                                  | 0 % ~calculating     |+++++                                             | 10% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++++         | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++    | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed = 00s
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("exp_est", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("exp_raven")
> ### * exp_raven
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: exp_raven
> ### Title: Export 'Raven' selections
> ### Aliases: exp_raven
> 
> ### ** Examples
> 
> 
> # Load data
> library(warbleR)
Loading required package: maps
Loading required package: tuneR
Loading required package: seewave
Loading required package: NatureSounds

NOTE: functions are being renamed (run 'print(new_function_names)' to see new names). Both old and new names are available in this version 
 Please see citation('warbleR') for use in publication
> data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
> 
> # Select data for a single sound file
> st1 <- selec.table[selec.table$sound.files == "Phae.long1.wav", ]
> 
> # Export data of a single sound file
> exp_raven(st1, file.name = "Phaethornis 1")
   |                                                  | 0 % ~calculating     |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed = 00s
> 
> # Export a single selection table including multiple files
> writeWave(Phae.long1, "Phae.long1.wav", extensible = FALSE) #save sound files 
> writeWave(Phae.long2, "Phae.long2.wav", extensible = FALSE)
> writeWave(Phae.long3, "Phae.long3.wav", extensible = FALSE)
> writeWave(Phae.long4, "Phae.long4.wav", extensible = FALSE)
> 
> exp_raven(X = selec.table, file.name = "Phaethornis multiple sound files",
+  single.file = TRUE, sound.file.path = getwd())
   |                                                  | 0 % ~calculating     |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed = 00s
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("exp_raven", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:warbleR’, ‘package:NatureSounds’, ‘package:seewave’,
  ‘package:tuneR’, ‘package:maps’

> nameEx("extract_ts")
> ### * extract_ts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: extract_ts
> ### Title: Extract time series parameters from data imported from 'Raven'
> ### Aliases: extract_ts
> 
> ### ** Examples
> 
> 
> # Load data
> data(selection_files)
> 
> #save 'Raven' selection tables in the temporary directory 
> writeLines(selection_files[[5]], con = names(selection_files)[5])
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("extract_ts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fix_path")
> ### * fix_path
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fix_path
> ### Title: Modify sound file path in Raven's selection tables
> ### Aliases: fix_path
> 
> ### ** Examples
> 
> {
+ 
+ # load warbleR for sound file examples
+ library(warbleR)
+ 
+ #load data 
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selection_files"))
+ 
+ # set temporary directory
+ # setwd(tempdir())
+ 
+ # save sound files
+ writeWave(Phae.long1,"Phae.long1.wav")
+ writeWave(Phae.long2,"Phae.long2.wav")
+ writeWave(Phae.long3,"Phae.long3.wav")
+ writeWave(Phae.long4,"Phae.long4.wav")   
+ # save 'Raven' selection tables in the temporary directory
+ out <- lapply(1:2, function(x)
+ writeLines(selection_files[[x]], con = names(selection_files)[x]))
+ 
+ # try drag and drop selection files into Raven (shouldn't work)
+ 
+ # now fix files
+ fix_path(path = getwd(), 
+ sound.file.col = "Begin File", new.begin.path = "YOUR NEW LOCATION HERE")
+ 
+ # try drag and drop into Raven again (should work now)
+ }
Loading required package: maps
Loading required package: tuneR
Loading required package: seewave
Loading required package: NatureSounds

NOTE: functions are being renamed (run 'print(new_function_names)' to see new names). Both old and new names are available in this version 
 Please see citation('warbleR') for use in publication
   |                                                  | 0 % ~calculating     |+++++                                             | 10% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++++         | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++    | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed = 00s
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fix_path", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:warbleR’, ‘package:NatureSounds’, ‘package:seewave’,
  ‘package:tuneR’, ‘package:maps’

> nameEx("imp_corr_mat")
> ### * imp_corr_mat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: imp_corr_mat
> ### Title: Import 'Raven' batch correlator output
> ### Aliases: imp_corr_mat
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  
> ##D # Load data
> ##D library(warbleR)
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
> ##D 
> ##D writeWave(Phae.long1, "Phae.long1.wav", extensible = FALSE) #save sound files 
> ##D writeWave(Phae.long2, "Phae.long2.wav", extensible = FALSE)
> ##D writeWave(Phae.long3, "Phae.long3.wav", extensible = FALSE)
> ##D writeWave(Phae.long4, "Phae.long4.wav", extensible = FALSE)
> ##D 
> ##D #create new folder to put cuts
> ##D dir.create("cuts")
> ##D 
> ##D # cut files
> ##D cut_sels(X = selec.table, mar = 0.05, path = tempdir(), dest.path = file.path(tempdir(), "cuts"))
> ##D 
> ##D #Now run 'Raven' batch correlator un the cuts and save the output in the same folder
> ##D 
> ##D # Import output (change the name of the file if you used a different one)
> ##D xcorr.rav <- imp_corr_mat(file = "BatchCorrOutput.txt", 
> ##D path = file.path(tempdir(), "cuts"))
> ##D 
> ##D # check results
> ##D   
> ##D ## correlation matrix
> ##D xcorr.rav[[1]]
> ##D 
> ##D ## time lag matrix
> ##D xcorr.rav[[2]]
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("imp_corr_mat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("imp_raven")
> ### * imp_raven
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: imp_raven
> ### Title: Import 'Raven' selections
> ### Aliases: imp_raven
> 
> ### ** Examples
> 
> 
> #load data 
> data(selection_files)
> 
> # set temporary directory
> # setwd(tempdir())
> 
> #save 'Raven' selection tables in the temporary directory 
> out <- lapply(1:2, function(x) 
+ writeLines(selection_files[[x]], con = names(selection_files)[x]))
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("imp_raven", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("imp_syrinx")
> ### * imp_syrinx
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: imp_syrinx
> ### Title: Import 'Syrinx' selections
> ### Aliases: imp_syrinx
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #load data 
> ##D data(selection_files)
> ##D 
> ##D #save 'Raven' selection tables in the temporary directory 
> ##D writeLines(selection_files[[7]], con = names(selection_files)[7])
> ##D 
> ##D syr.dat <- imp_syrinx(all.data = FALSE)
> ##D 
> ##D # View(syr.dat)
> ##D 
> ##D #getting all the data
> ##D syr.dat <- imp_syrinx(all.data = TRUE)
> ##D 
> ##D # View(syr.dat)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("imp_syrinx", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("match_wav_case")
> ### * match_wav_case
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: match_wav_case
> ### Title: Fix the extension case of sound files
> ### Aliases: match_wav_case
> 
> ### ** Examples
> 
> library(warbleR)
Loading required package: maps
Loading required package: tuneR
Loading required package: seewave
Loading required package: NatureSounds

NOTE: functions are being renamed (run 'print(new_function_names)' to see new names). Both old and new names are available in this version 
 Please see citation('warbleR') for use in publication
> data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", 
+ "selec.table"))
> 
> writeWave(Phae.long1, "Phae.long1.wav", extensible = FALSE) #save sound files 
> writeWave(Phae.long2, "Phae.long2.wav", extensible = FALSE)
> writeWave(Phae.long3, "Phae.long3.wav", extensible = FALSE)
> writeWave(Phae.long4, "Phae.long4.wav", extensible = FALSE)
> 
> # change one extension
> selec.table$sound.files <- as.character(selec.table$sound.files)
> selec.table$sound.files[1] <- gsub("\\.wav$", ".WAV", selec.table$sound.files[1]) 
>  
>  # fixed extension an return data frame
>  match_wav_case(X = selec.table)
      sound.files channel selec     start       end bottom.freq  top.freq
1  Phae.long1.wav       1     1 1.1693549 1.3423884    2.220105  8.604378
2  Phae.long1.wav       1     2 2.1584085 2.3214565    2.169437  8.807053
3  Phae.long1.wav       1     3 0.3433366 0.5182553    2.218294  8.756604
4  Phae.long2.wav       1     1 0.1595983 0.2921692    2.316862  8.822316
5  Phae.long2.wav       1     2 1.4570585 1.5832087    2.284006  8.888027
6  Phae.long3.wav       1     1 0.6265520 0.7577715    3.006834  8.822316
7  Phae.long3.wav       1     2 1.9742132 2.1043921    2.776843  8.888027
8  Phae.long3.wav       1     3 0.1233643 0.2545812    2.316862  9.315153
9  Phae.long4.wav       1     1 1.5168116 1.6622365    2.513997  9.216586
10 Phae.long4.wav       1     2 2.9326920 3.0768784    2.579708 10.235116
11 Phae.long4.wav       1     3 0.1453977 0.2904966    2.579708  9.742279
   sel.comment rec.comment
1          c24          NA
2          c25          NA
3          c26          NA
4          c27          NA
5          c28          NA
6          c29          NA
7          c30          NA
8          c31          NA
9          c32          NA
10         c33          NA
11         c34          NA
>   
>  # fixed extension an return sound file names
>  match_wav_case(X = selec.table, output = "names")
 [1] "Phae.long1.wav" "Phae.long1.wav" "Phae.long1.wav" "Phae.long2.wav"
 [5] "Phae.long2.wav" "Phae.long3.wav" "Phae.long3.wav" "Phae.long3.wav"
 [9] "Phae.long4.wav" "Phae.long4.wav" "Phae.long4.wav"
>     
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("match_wav_case", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:warbleR’, ‘package:NatureSounds’, ‘package:seewave’,
  ‘package:tuneR’, ‘package:maps’

> nameEx("raven_batch_detec")
> ### * raven_batch_detec
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: raven_batch_detec
> ### Title: Run 'Raven' batch detector
> ### Aliases: raven_batch_detec
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # here replace with the path where 'Raven' is install in your computer
> ##D raven.path <- "PATH_TO_RAVEN_DIRECTORY_HERE" 
> ##D 
> ##D # Run detector on raven example sound files
> ##D 
> ##D # single sound file using 'Amplitude Detector' 
> ##D detec.res <- raven_batch_detec(raven.path = raven.path, 
> ##D sound.files = "BlackCappedVireo.aif", path = file.path(raven.path, "Examples"), 
> ##D detector.type = "Amplitude Detector")
> ##D 
> ##D # on raven examples  2 files
> ##D detec.res <- raven_batch_detec(raven.path = raven.path, 
> ##D sound.files = c("BlackCappedVireo.aif", "CanyonWren.wav"), 
> ##D path = file.path(raven.path, "Examples"), detector.type = "Amplitude Detector")
> ##D 
> ##D # using 'Band Limited Energy Detector' 
> ##D detec.res <- raven_batch_detec(raven.path = raven.path, 
> ##D sound.files = c("BlackCappedVireo.aif", "CanyonWren.wav"), 
> ##D path = file.path(raven.path, "Examples"), detector = "Band Limited Energy Detector")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("raven_batch_detec", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("relabel_colms")
> ### * relabel_colms
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: relabel_colms
> ### Title: Relabel columns to match the selection table format
> ### Aliases: relabel_colms
> 
> ### ** Examples
> 
> 
> # Load data
> data(selection_files)
> 
> #save 'Raven' selection tables in the temporary directory 
> writeLines(selection_files[[5]], con = names(selection_files)[5])
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("relabel_colms", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("run_raven")
> ### * run_raven
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: run_raven
> ### Title: Open sound files in 'Raven' sound analysis software
> ### Aliases: run_raven
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # First set temporary folder
> ##D setwd(tempdir())
> ##D 
> ##D # save sound files
> ##D library(warbleR) 
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4"))
> ##D writeWave(Phae.long1, "Phae.long1.wav", extensible = FALSE)
> ##D writeWave(Phae.long2, "Phae.long2.wav", extensible = FALSE)
> ##D 
> ##D # here replace with the path where 'Raven' is install in your computer
> ##D raven.path <- "PATH_TO_RAVEN_DIRECTORY_HERE" 
> ##D 
> ##D # run function 
> ##D run_raven(raven.path = raven.path, sound.files = c("Phae.long1.wav", "Phae.long2.wav"),
> ##D  at.the.time = 2, import = T, name.from.file = T, ext.case = "upper", 
> ##D  all.data = TRUE, path = tempdir())  
> ##D  
> ##D #getting all the data
> ##D rav.dat<-run_raven(all.data = TRUE, raven.path = raven.path)
> ##D # View(rav.dat)
> ##D 
> ##D writeWave(Phae.long3, "Phae.long3.wav", extensible = FALSE)
> ##D writeWave(Phae.long4, "Phae.long4.wav", extensible = FALSE)
> ##D 
> ##D # run function on all the wav files in the working directory 3 at the time
> ##D run_raven(raven.path = raven.path, sound.files = list.files(pattern = "\\.wav$", 
> ##D ignore.case = TRUE, path = tempdir()), at.the.time = 3, import = FALSE, 
> ##D path = tempdir())
> ##D   
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("run_raven", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("to_sound_selection")
> ### * to_sound_selection
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: to_sound_selection
> ### Title: Convert Raven's selection files into sound selection files
> ### Aliases: to_sound_selection
> 
> ### ** Examples
> 
> {
+ 
+ #load data 
+ data(selection_files)
+ 
+ # set temporary directory
+ # setwd(tempdir())
+ 
+ # save 'Raven' selection tables in the temporary directory
+ out <- lapply(1:2, function(x)
+ writeLines(selection_files[[x]], con = names(selection_files)[x]))
+ 
+ # try drag and drop selection files into Raven (shouldn't work)
+ 
+ # now convert files
+ to_sound_selection(sound.file.path = getwd(), 
+ sound.file.col = "Begin Path")
+ 
+ # try drag and drop into Raven again (should work now)
+ }
   |                                                  | 0 % ~calculating     |+++++                                             | 10% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++++                                   | 30% ~00s          'sound.file.col' not found in at least 1 selection file   |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++++         | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++    | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed = 00s
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("to_sound_selection", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.003 0.085 2.871 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
